---
title: "Unlocking Collaborative Power with Git, GitHub CI/CD, and LLMs in Pharma"
author: "Eli Miller, Ben Straub, Eric Nantz"
format: revealjs
---

## Intro

## Intro to R Consortium

<div style="text-align: center;"> <img src="./images/rconsortium.png" alt="xkcd" style="width: 900px;"/> </div>




## Intro to R Consortium R-based Submission Pilots to FDA

<div style="display: flex; justify-content: space-between; align-items: center;"> 
<img src="images/pilot1.png" alt="Hex 1" style="max-width: 18%; height: auto;"> 
<img src="images/pilot2.png" alt="Hex 2" style="max-width: 18%; height: auto;"> 
<img src="images/pilot3.png" alt="Hex 3" style="max-width: 18%; height: auto;"> 
<img src="images/pilot4a.png" alt="Hex 4a" style="max-width: 18%; height: auto;"> 
<img src="images/pilot4b.png" alt="Hex 4b" style="max-width: 20%; height: auto;">
<img src="images/pilot5.png" alt="Hex 5" style="max-width: 18%; height: auto;">
</div>

## Problem Statement

:::{.incremental}

Questions: 

* How do people in the Pilots collaborate, ensure accuracy and reproducibility across multiple companies, platforms, OS, timezones and skillsets?


* renv
* git, GitHub
* CI/CD
* LLMs

:::

## Reproducibile Environments with Open Source Products

<div style="text-align: center;"> <img src="./images/replication_crisis.png" alt="xkcd" style="width: 350px;"/> </div>

::: footer
[xkcd](https://xkcd.com/)
:::

## Reproducibile Environments with Open Source Products

* A drug company uses open source products, like R, to demonstrate that a drug is safe and effective.

* How can the company ensure the analysis is reproducible when given to a regulatory agency? 

## renv: Reproducible R Package Environments

:::{.incremental}

* Isolates project-specific R package libraries
* Captures and locks package versions for reproducibility
* Simplifies dependency management and restoration
* Integrates smoothly with RStudio and other tools
* Facilitates collaboration by sharing a consistent environment

:::

## All the renv you need to know {.smaller}

`renv::init()`: Initializes a new renv project by creating a project-specific library and a lockfile. Use this at the start of a new project.

`renv::install()`: Installs packages into your project’s local library. This command can install a package from CRAN, GitHub, or local source.

`renv::snapshot()`: Captures the state of your current project environment and writes it to the renv.lock file. This ensures that the project dependencies are tracked for future use or collaboration.

`renv::restore()`: Restores the project library from the renv.lock file. Use this when you’re setting up the project on a new system or when you need to ensure package versions match those recorded in the lockfile.

## All the renv you need to know {.smaller}

`renv::update()`: Updates the packages in your project and optionally updates the renv.lock file with the new versions.

`renv::status()`: Checks for any discrepancies between the state of the project’s library and the renv.lock file. This helps identify packages that might be out-of-sync.

`renv::remove()`: Removes one or more packages from your project’s library, making it easy to manage unused dependencies.

`renv::clean()`: Cleans up the project’s library by removing unused packages that aren’t required based on the renv.lock file.

## renv tips and tricks

* `renvignore`

* 


## renv for Pilots

* Using renv allows us to document to FDA our environments
* FDA uses this 






